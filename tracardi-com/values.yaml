secrets:
  dockerHub: "SET-DOCKERHUB-SECRET"
  installationToken: "SET-INSTALLATION-SECRET"

gui:
  image:
    repository: tracardi/tracardi-gui
    tag: 0.8.0
    pullPolicy: IfNotPresent
  port: 8787
  replicas: 1
  ingress:
    enabled: false
    domain: ui.tracardi.s.revma.io
    ingressClassName: ""
    tls:
      enable: true
      secretName: ""
    annotations: {}

apiWeb:
  image:
    repository: tracardi/com-tracardi-api
    tag: 0.8.0
    pullPolicy: IfNotPresent
  port: 8585
  replicas: 1
  ingress:
    enabled: false
    domain: track.tracardi.example.com
    ingressClassName: ""
    tls:
      enable: false
      secretName: ""
    annotations: {}
  config:
    saveLogs: "no"
    logginLevel: "info"
    apiDocs: "no"
  license:
    existingSecret: ""  # The secret need to have a key field in it

apiGui:
  image:
    repository: tracardi/com-tracardi-api
    tag: 0.8.0
    pullPolicy: IfNotPresent
  port: 8686
  replicas: 1
  ingress:
    enabled: false
    domain: api.tracardi.example.com
    ingressClassName: ""
    tls:
      enable: false
      secretName: ""
    annotations: {}
  config:
    saveLogs: "yes"
    logginLevel: "info"
    apiDocs: "yes"
  license:
    existingSecret: ""  # The secret need to have a key field in it

# Scheduler

scheduler:
  image:
    repository: tracardi/com-tracardi-scheduler
    tag: 0.8.0
    pullPolicy: IfNotPresent
  replicas: 1
  config:
    loggingLevel: "info"
  license:
    existingSecret: "SET-SCHEDULER-LICENSE"  # The secret need to have a key field in it

schedulerWorker:
  image:
    repository: tracardi/com-tracardi-scheduler-worker
    tag: 0.8.0
    pullPolicy: IfNotPresent
  replicas: 1
  config:
    loggingLevel: "info"
  license:
    existingSecret: "SET-SCHEDULER-LICENSE"  # The secret need to have a key field in it

# Segmentation

segmentation:
  image:
    repository: tracardi/com-job-segmentation
    tag: 0.8.0
    pullPolicy: IfNotPresent
  config:
    successfulJobsHistoryLimit: 2
    failedJobsHistoryLimit: 2
    saveLogs: "no"
    loggingLevel: "INFO"
    poolSize: 100
    saveAfterPools: 40
    schedule: ""      # example */15 * * * * - means run every 15 minutes
  license:
    existingSecret: "SET-SEGMENTATION-LICENSE"  # The secret need to have a key field in it

# Update and Migration

updateWorker:
  loggingLevel: "INFO"
  image:
    repository: tracardi/worker
    tag: 0.8.0
    pullPolicy: IfNotPresent
  replicas: 1
  config:
    saveLogs: "no"

# Bridges

bridge:
  rest:
    image:
      repository: tracardi/com-bridge-rest
      tag: 0.8.0
      pullPolicy: IfNotPresent
    replicas: 1
    ingress:
      enabled: false
      domain: async.tracardi.example.com
      ingressClassName: ""
      tls:
        enable: true
        secretName: ""
      annotations: {}
    config:
      loggingLevel: "info"
    license:
      existingSecret: "SET-REST-LICENSE-SECRET"
  restWorker:
    image:
      repository: tracardi/com-bridge-rest-worker
      tag: 0.8.0
      pullPolicy: IfNotPresent
    replicas: 2
    config:
      loggingLevel: "info"
    license:
      existingSecret: "SET-REST-LICENSE-SECRET"
  queue:
    image:
      repository: tracardi/com-bridge-queue
      tag: 0.8.0
      pullPolicy: IfNotPresent
    replicas: 1
    config:
      loggingLevel: "info"
    license:
      existingSecret: "SET-QUEUE-LICENSE-SECRET"

# Infrastructure

elastic:
  host: "elastic-svc"
  schema: https
  username: "elastic"
  existingSecret: "elastic-secret"
  existingSecretPasswordKey: "elastic"
  verifyCerts: "no"
  port: 9200

redis:
  host: redis://redis-svc/0
  existingSecret: "redis-secret"
  existingSecretPasswordKey: "redis-password"
  port: "6379"


# Digital ocean

digitalOcean:
  loadBalancer: "yes"
  certId: ""