secrets:
  dockerHub: "SET-DOCKERHUB-SECRET"
  installationToken: "SET-INSTALLATION-SECRET"

config:
  image:
    tag: 0.8.0  # Tag should be the same for gui and backend
    api:
      repository: tracardi/com-tracardi-api
      pullPolicy: IfNotPresent
    gui:
      repository: tracardi/tracardi-gui
      pullPolicy: IfNotPresent

gui:
  image:
  port: 8787
  replicas: 1
  ingress:
    enabled: false
    domain: gui.tracardi.example.com
    ingressClassName: ""
    tls:
      enable: true
      secretName: ""
    annotations: {}

# Collector API is the API that should be exposed to the internet. It has limited API only to collecting data.
# No GUI like operations are available

collector:
  port: 8484
  replicas: 1
  ingress:
    enabled: true
    domain: track.tracardi.example.com
    ingressClassName: ""
    tls:
      enable: true
      secretName: ""
    annotations: {}
  config:
    saveLogs: "no"
    logginLevel: "WARNING"
    apiDocs: "no"
  license:
    existingSecret: "SET-TRACARDI-LICENSE-SECRET"  # The secret need to have a key field in it

# Production API is the API that should not be exposed to the internet. It has the API functions with the access to
# production data. Also if possible only users who are allowed to see real data should have opened accounts on this
# instance.

production:
  port: 8585
  replicas: 1
  ingress:
    enabled: true
    domain: prod.tracardi.example.com
    ingressClassName: ""
    tls:
      enable: true
      secretName: ""
    annotations: {}
  config:
    saveLogs: "no"
    logginLevel: "WARNING"
    apiDocs: "no"
  license:
    existingSecret: "SET-TRACARDI-LICENSE-SECRET"  # The secret need to have a key field in it

# Stating API is the API that should not be exposed to the internet. It has the API functions with the access to
# test data. Access to this server should have people working on the data orchestration.

staging:
  port: 8686
  replicas: 1
  ingress:
    enabled: true
    domain: staging.tracardi.example.com
    ingressClassName: ""
    tls:
      enable: true
      secretName: ""
    annotations: {}
  config:
    saveLogs: "yes"
    logginLevel: "WARNING"
    apiDocs: "yes"
  license:
    existingSecret: "SET-TRACARDI-LICENSE-SECRET"  # The secret need to have a key field in it

# Scheduler. It is a service that reschdules ro execution the delayed events. A delayed event happens when the
# workflow pauses and resumes after some time.

scheduler:
  image:
    repository: tracardi/com-tracardi-scheduler
    tag: 0.8.0
    pullPolicy: IfNotPresent
  replicas: 1
  config:
    loggingLevel: "WARNING"
  license:
    existingSecret: "SET-SCHEDULER-LICENSE"  # The secret need to have a key field in it

# Scheduler worker. It is a service that is responsible for execution the delayed events. A delayed event happens when the
# workflow pauses and resumes after some time.

schedulerWorker:
  image:
    repository: tracardi/com-tracardi-scheduler-worker
    tag: 0.8.0
    pullPolicy: IfNotPresent
  replicas: 1
  config:
    loggingLevel: "WARNING"
  license:
    existingSecret: "SET-SCHEDULER-LICENSE"  # The secret need to have a key field in it

# Segmentation job is a job that runs periodically and checks if some profiles should be run through a segmentation process.

segmentationJob:
  image:
    repository: tracardi/com-tracardi-segmentation-job
    tag: 0.8.0
    pullPolicy: IfNotPresent
  config:
    successfulJobsHistoryLimit: 2
    failedJobsHistoryLimit: 2
    saveLogs: "no"
    loggingLevel: "WARNING"
    poolSize: 100
    saveAfterPools: 40
    schedule: ""      # example */15 * * * * - means run every 15 minutes
  license:
    existingSecret: "SET-SEGMENTATION-LICENSE"  # The secret need to have a key field in it

# Segmentation worker runs a segmentation process.

segmentationWorker:
  image:
    repository: tracardi/com-tracardi-segmentation-worker
    tag: 0.8.0
    pullPolicy: IfNotPresent
  config:
    saveLogs: "no"
    loggingLevel: "WARNING"
  license:
    existingSecret: "SET-SEGMENTATION-LICENSE"  # The secret need to have a key field in it

# Update and Migration. Set of workers responsible for system migration, data import, etc.

updateWorker:
  image:
    repository: tracardi/update-worker
    tag: 0.8.0
    pullPolicy: IfNotPresent
  replicas: 1
  config:
    saveLogs: "no"
    loggingLevel: "WARNING"

# Bridges. Services responsible for collection data from different channels. They bridge the defined transportation protocol to tracardi event source.

bridge:
  rest:
    image:
      repository: tracardi/com-bridge-rest
      tag: 0.8.0
      pullPolicy: IfNotPresent
    replicas: 1
    ingress:
      enabled: false
      domain: async.tracardi.example.com
      ingressClassName: ""
      tls:
        enable: true
        secretName: ""
      annotations: {}
    config:
      loggingLevel: "WARNING"
    license:
      existingSecret: "SET-REST-LICENSE-SECRET"
  restWorker:
    image:
      repository: tracardi/com-bridge-rest-worker
      tag: 0.8.0
      pullPolicy: IfNotPresent
    replicas: 1
    config:
      loggingLevel: "WARNING"
    license:
      existingSecret: "SET-REST-LICENSE-SECRET"
  queue:
    image:
      repository: tracardi/com-bridge-queue
      tag: 0.8.0
      pullPolicy: IfNotPresent
    replicas: 1
    config:
      loggingLevel: "WARNING"
    license:
      existingSecret: "SET-QUEUE-LICENSE-SECRET"

# Infrastructure

elastic:
  host: "elastic-svc"
  schema: https
  username: "elastic"
  existingSecret: "elastic-secret"
  existingSecretPasswordKey: "elastic"
  verifyCerts: "no"
  port: 9200

redis:
  existingSecret: "redis-secret"
  existingSecretPasswordKey: "redis-password"
  schema: "redis://"
  host: redis-svc
  port: "6379"
  db: "0"


# Digital ocean

digitalOcean:
  loadBalancer: false
  certId: "SET-CERT-ID"